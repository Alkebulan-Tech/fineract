# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "develop" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "develop" ]

env:
  PROJECT_ID: ${{ secrets.KEMETX_GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: fineract-cluster-d06d1de9    # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: kemetx-gke-test # TODO: update to deployment name
  REPOSITORY: kemetx-fineract-d06d1de9 # TODO: update to Artifact Registry docker repository
  IMAGE: alekbulan-fineract

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
          fetch-depth: 0
          
    - name: Set up JDK 17
      uses: actions/setup-java@387ac29b308b003ca37ba93a6cab5eb57c8f5f93 # v4
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: gradle

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/991252519654/locations/global/workloadIdentityPools/kemetx-pool-test/providers/kemetx-provider'
        service_account: 'kemetx-gke@nodal-linker-425007-t9.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    #- id: 'auth'
    #  uses: 'google-github-actions/auth@v0.10.1'
    #  with:
    #    credentials_json: '${{ secrets.GKE_GCP_CREDENTIALS }}'

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: 'Set up GKE credentials'
      uses: 'google-github-actions/get-gke-credentials@v0.4.0'
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    #- name: Build
    #  run: |-
    #    docker build \
    #      --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
    #      --build-arg GITHUB_SHA="$GITHUB_SHA" \
    #      --build-arg GITHUB_REF="$GITHUB_REF" \
    #      .
    - name: Build the image
      run: ./gradlew --no-daemon --console=plain :fineract-provider:clean :fineract-provider:compileJava :fineract-provider:jibDockerBuild -x test -x cucumber
      env:
        GAR_LOCATION: ${{ env.GAR_LOCATION }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
        PROJECT_ID: ${{ env.PROJECT_ID }}
        REPOSITORY: ${{ env.REPOSITORY }}
        IMAGE: ${{ env.IMAGE }}
        
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    - name: Deploy
#      env:
#        FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST: $(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST)
#        FINERACT_DEFAULT_TENANTDB_NAME_TEST: $(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_NAME_TEST)
#        FINERACT_HIKARI_PASSWORD_TEST: $(gcloud secrets versions access latest --secret=FINERACT_HIKARI_PASSWORD_TEST)
#        FINERACT_HIKARI_USERNAME_TEST: $(gcloud secrets versions access latest --secret=FINERACT_HIKARI_USERNAME_TEST)
#        FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST: $(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST)
      run: |
        # Fetch secrets from Google Cloud Secret Manager
        export FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST=$(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST)
        export FINERACT_DEFAULT_TENANTDB_NAME_TEST=$(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_NAME_TEST)
        export FINERACT_HIKARI_PASSWORD_TEST=$(gcloud secrets versions access latest --secret=FINERACT_HIKARI_PASSWORD_TEST)
        export FINERACT_HIKARI_USERNAME_TEST=$(gcloud secrets versions access latest --secret=FINERACT_HIKARI_USERNAME_TEST)
        export FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST=$(gcloud secrets versions access latest --secret=FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST)
        
        # Add Helm repo if needed (adjust to your Helm chart repository)
        helm repo add camunda-platform https://helm.camunda.io
        helm repo add elastic http://helm.elastic.co
        helm repo add kibana http://helm.elastic.co
        helm repo add mysql https://charts.bitnami.com/bitnami
        helm repo add kong https://charts.konghq.com
        helm repo add keycloak https://codecentric.github.io/helm-charts
        helm repo add redis https://charts.bitnami.com/bitnami
        #helm repo add jetstack https://charts.jetstack.io
        
        
        helm repo update
  
        helm upgrade -f helm/fineract/values.yaml ph-ee-backend helm/fineract/ \
        --install --namespace paymenthub-back-end-d06d1de9 \
        --set fineract.image=${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA} \
        --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_IDENTIFIER=${FINERACT_DEFAULT_TENANTDB_IDENTIFIER_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_NAME=${FINERACT_DEFAULT_TENANTDB_NAME_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_HOSTNAME=${FINERACT_DEFAULT_TENANTDB_HOSTNAME_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_PWD=${FINERACT_HIKARI_PASSWORD_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_HIKARI_PASSWORD=${FINERACT_HIKARI_PASSWORD_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_HIKARI_USERNAME=${FINERACT_HIKARI_USERNAME_TEST} \
        --set fineract.spec.template.spec.containers.env.FINERACT_ADMIN_USERNAME=${FINERACT_HIKARI_USERNAME_TEST}