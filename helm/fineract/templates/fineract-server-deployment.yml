# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.fineract.enabled }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: fineract-server
  name: fineract-server
spec:
  ports:
  - protocol: TCP
    port: {{ .Values.fineract.spec.template.spec.containers.env.CONTAINER_PORT }}
    targetPort: {{ .Values.fineract.spec.template.spec.containers.env.FINERACT_SERVER_PORT }}
  selector:
    app: fineract-server
    tier: backend
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: fineract-server
  labels:
    app: fineract-server
spec:
  selector:
    matchLabels:
      app: fineract-server
      tier: backend
  strategy:
    type: Recreate
  template: 
    metadata:
      labels:
        app: fineract-server
        tier: backend
    spec:
      serviceAccountName: fineract-ksa #need to add this to secret manager
      initContainers:
#        - name: cloudsqlproxy
#          # It is recommended to use the latest version of the Cloud SQL Auth Proxy
#          # Make sure to update on a regular schedule!
#          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.2
#          args:
#            # If connecting from a VPC-native GKE cluster, you can use the
#            # following flag to have the proxy connect over private IP
#            # - "--private-ip"
#            - "nodal-linker-425007-t9:us-central1:kemetx-instance"
#            # Enable structured logging with LogEntry format:
#            - "--structured-logs"
#
#            # Replace DB_PORT with the port the proxy should listen on
#            - "--port=3306"
#            - "--auto-iam-authn"
#
#          securityContext:
#            # The default Cloud SQL Auth Proxy image runs as the
#            # "nonroot" user and group (uid: 65532) by default.
#            runAsNonRoot: true
##           You should use resource requests/limits as a best practice to prevent
##           pods from consuming too many resources and affecting the execution of
##           other pods. You should adjust the following values based on what your
##           application needs. For details, see
##           https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
#          resources:
#            requests:
#              # The proxy's memory use scales linearly with the number of active
#              # connections. Fewer open connections will use less memory. Adjust
#              # this value based on your application's requirements.
#              memory: "500Mi"
#              # The proxy's CPU use scales linearly with the amount of IO between
#              # the database and the application. Adjust this value based on your
#              # application's requirements.
#              cpu: "200m"
#            limits:
#              memory: "1Gi"
#              cpu: "500m"
#        - name: cloudsqlproxy
#          image: cloudsql-proxy:1.17.0 # Update image version as needed
#          command: [ "/cloud_sql_proxy","-instances=nodal-linker-425007-t9:us-central1:kemetx-instance=tcp:3306","--structured-logs", "--auto-iam-authn" ]
#          volumeMounts:
#            - name: cloud-sql-secret
#              mountPath: /credentials
#          resources:
#            requests:
#              cpu: 100m
#              memory: 100Mi
#            limits:
#              cpu: 500Mi
#              memory: 1Gi
#          volumes:
#            - name: cloud-sql-secret
#              secret:
#                secretName: fineract-tenants-db-secret
        - name: init-mydb
          image: mysql:8.0
#          command: ['sh', '-c', 'echo -e "Checking for the availability of MYSQL server deployment"; while ! nc -z cloudsqlproxy 3306; do sleep 1; printf "-"; done; echo -e " >> MYSQL server has started";']
          command: ['sh', '-c', 'echo -e "Checking for the availability of MYSQL server deployment"; until mysql -h cloudsqlproxy
          -u admin_user
          -pk3m3TxF1N3rac7 -e "select 1";
           do echo "Waiting for MySQL"; sleep 5; done; echo "MYSQL server has started";
            mysql -h cloudsqlproxy
            -u admin_user
            -pk3m3TxF1N3rac7 <<EOSQL
                      GRANT ALL ON *.* TO "root"@"%";
                      GRANT ALL PRIVILEGES ON kemetx_tenants.* TO "mifos";
                      GRANT ALL PRIVILEGES ON kemetx_default.* TO "mifos";
                      EOSQL']
      containers:
      - name: fineract-server
        image: "{{ .Values.fineract.image }}"
        imagePullPolicy: Always
        resources:
          limits:
            cpu: "{{ .Values.fineract.resources.limits.cpu }}"
            memory: "{{ .Values.fineract.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.fineract.resources.requests.cpu }}"
            memory: "{{ .Values.fineract.resources.requests.memory }}"
        env:
          - name: FINERACT_SERVER_PORT
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_SERVER_PORT }}"
          - name: FINERACT_NODE_ID
            value: '1'
          - name: FINERACT_HIKARI_DRIVER_CLASS_NAME
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_DRIVER_CLASS_NAME }}"
          - name: FINERACT_HIKARI_JDBC_URL
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_JDBC_URL }}"
          - name: FINERACT_HIKARI_USERNAME
#            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_USERNAME }}"
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: username
          - name: FINERACT_HIKARI_PASSWORD
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_PASSWORD }}"
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: password
          - name: FINERACT_DEFAULT_TENANTDB_HOSTNAME
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_HOSTNAME }}"
          - name: FINERACT_DEFAULT_TENANTDB_PORT
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_PORT }}"
          - name: FINERACT_DEFAULT_TENANTDB_IDENTIFIER
            value:  "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_IDENTIFIER }}" 
          - name: FINERACT_DEFAULT_TENANTDB_NAME
            value:   "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_DEFAULT_TENANTDB_NAME}}"
          - name: FINERACT_DEFAULT_TENANTDB_UID
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_USERNAME }}"
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: username
          - name: FINERACT_DEFAULT_TENANTDB_PWD
            value: "{{ .Values.fineract.spec.template.spec.containers.env.FINERACT_HIKARI_PASSWORD }}"
#            valueFrom:
#              secretKeyRef:
#                name: fineract-tenants-db-secret
#                key: password
          - name: FINERACT_DEFAULT_TENANTDB_CONN_PARAMS
            value: ''
{{- if .Values.extraEnvs | default .Values.fineract.deployment.extraEnvs }}
{{ toYaml ( .Values.extraEnvs | default .Values.fineract.deployment.extraEnvs ) | indent 10 }}
{{- end }}
        ports:
          - containerPort: {{ .Values.fineract.spec.template.spec.containers.env.FINERACT_SERVER_PORT }}
            name: fineract-server
        lifecycle:
            preStop:
              exec:
                command: ['sh', '-c', '{{ .Values.fineract.preStopScript}}']

---
{{- if .Values.fineract.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fineract-ingress
  annotations:
{{- if .Values.fineract.ingress.annotations }}
{{ toYaml .Values.fineract.ingress.annotations | indent 4 }}
{{- end }}
spec:
  rules:
    - host: "{{ .Values.fineract.ingress.hostname }}"
      http:
        paths:
          - path: "{{ .Values.fineract.ingress.path }}"
            pathType: Prefix
            backend:
              service:
                name: fineract-server
                port: 
                  number: {{ .Values.fineract.spec.template.spec.containers.env.CONTAINER_PORT }}
    - host: "{{ .Values.webapp.ingress.hostname }}"
      http:
        paths:
          - path: "{{ .Values.webapp.ingress.path }}"
            pathType: Prefix
            backend:
              service:
                name: web-app
                port: 
                  number: 8081
    - host: "{{ .Values.selfservice.ingress.hostname }}"
      http:
        paths:
          - path: "{{ .Values.selfservice.ingress.path }}"
            pathType: Prefix
            backend:
              service:
                name: self-service
                port: 
                  number: 8082
  #tls:
  #  - hosts:
  #      - "{{ .Values.fineract.ingress.wildcardhostname }}"
  #    secretName: "{{ .Values.tls }}"
{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: fineract-tenants-db-secret
type: Opaque
data:
  username: "bWlmb3M="
  password: "azNtM1R4RjFOM3JhYzc="
{{- end}}

